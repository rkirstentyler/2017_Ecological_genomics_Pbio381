ssw_meta_Int
ssw_meta_Int
ssw_meta_Int <- subset(ssw_meta, ssw_meta$Location != "SUB")
ssw_meta_Int
Int_gl$ind.names
ssw_meta_Int$Individual
ssw_meta <- read.table("ssw_healthloc.txt", header=T) # read in the metadata
ssw_meta_nomm <- subset(ssw_meta, ssw_meta$Trajectory != "MM") #removing MM indivs
ssw_meta_Int <- subset(ssw_meta, ssw_meta$Location != "SUB") #removing SUB indivs
ssw_meta_nomm <- ssw_meta[order(ssw_meta$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta[order(ssw_meta$Individual),] # sort by Individual ID, just like the VCF file
Int_gl$ind.names
ssw_meta_Int$Individual
ssw_meta_nomm <- ssw_meta[order(ssw_meta_nomm$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
Int_gl$ind.names
ssw_meta_Int$Individual
ssw_meta_nomm <- ssw_meta_nomm[order(ssw_meta_nomm$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
Int_gl$ind.names
ssw_meta_Int$Individual
ssw_meta_nomm <- ssw_meta_nomm[order(ssw_meta_nomm$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_nom
ssw_meta_nomm
ssw_meta <- read.table("ssw_healthloc.txt", header=T) # read in the metadata
ssw_meta_nomm <- subset(ssw_meta, ssw_meta$Trajectory != "MM") #removing MM indivs
ssw_meta_nomm
ssw_meta_nomm <- ssw_meta_nomm[order(ssw_meta_nomm$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_nomm
ssw_meta_Int
ssw_meta_Int <- subset(ssw_meta, ssw_meta$Location != "SUB") #removing SUB indivs
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int
Int_gl$ind.names
Int_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_int_allbi_maf.02_miss.8.recode.vcf")
all_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_nomm_allbi_maf.02_miss.8.recode.vcf.gz")
# The adegenet package uses a highly efficient way of storing large SNP datasets in R called a "genlight" object. The following function creates a genlight object from your vcf:
Int_gl <- vcfR2genlight(Int_vcf)
print(Int_gl) # Looks good! Right # of SNPs and individuals!
all_gl <- vcfR2genlight(all_vcf)
print(all_gl) # Looks good! Right # of SNPs and individuals!
Int_gl$ind.names
disease.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
Int_gl$pop <- ssw_meta_Int$Location # assign locality info
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
IntPlot(Int_gl, posi="bottomleft")
glPlot(Int_gl, posi="bottomleft")
disease.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
Int_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_int_allbi_maf.02_miss.8.recode.vcf")
all_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_nomm_allbi_maf.02_miss.8.recode.vcf.gz")
Int_gl <- vcfR2genlight(Int_vcf)
print(Int_gl) # Looks good! Right # of SNPs and individuals!
all_gl <- vcfR2genlight(all_vcf)
print(all_gl) # Looks good! Right # of SNPs and individuals!
Int_gl$ind.names
Int_gl$loc.names[1:10]
Int_gl$chromosome[1:3]
ssw_meta <- read.table("ssw_healthloc.txt", header=T) # read in the metadata
ssw_meta_nomm <- subset(ssw_meta, ssw_meta$Trajectory != "MM") #removing MM indivs
ssw_meta_Int <- subset(ssw_meta, ssw_meta$Location != "SUB") #removing SUB indivs
ssw_meta_nomm <- ssw_meta_nomm[order(ssw_meta_nomm$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
Int_gl$ind.names
ssw_meta_Int$Individual
Int_gl$pop <- ssw_meta_Int$Location # assign locality info
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
all_gl$ind.names
ssw_meta_nomm$Individual
ssw_meta_nomm
all_gl$pop <- ssw_meta_nomm$Location # assign locality info
all_gl$other <- as.list(ssw_meta_nomm) # assign disease status
glPlot(Int_gl, posi="bottomleft")
glPlot(all_gl, posi="bottomleft")
disease.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(disease.dapc, grp=Int_gl$other$Trajectory, legend=T)
compoplot(disease.dapc)
print(Int_gl) # Looks good! Right # of SNPs and individuals!
ssw_meta_nomm <- subset(ssw_meta, ssw_meta$Trajectory != "MM") #removing MM indivs
ssw_meta_Int <- subset(ssw_meta_nomm, ssw_meta_nomm$Location != "SUB") #removing SUB indivs
ssw_meta_nomm <- ssw_meta_nomm[order(ssw_meta_nomm$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
Int_gl$ind.names
ssw_meta_Int$Individual
Int_gl$pop <- ssw_meta_Int$Location # assign locality info
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
disease.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int
Int_gl$ind.names
ssw_meta_Int$Individual
Int_gl$other
Int_gl$Trajectory <- as.list(ssw_meta_Int) # assign disease status
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
Int_gl$pop <- ssw_meta_Int$Location # assign locality info
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
disease.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(disease.dapc, grp=Int_gl$other$Trajectory, legend=T)
compoplot(disease.dapc)
View(ssw_meta)
ssw_meta <- read.table("ssw_healthloc_noMM.txt", header=T) # read in the metadata without MM indivs
ssw_meta
ssw_meta <- read.table("ssw_healthloc_noMM.txt", header=T) # read in the metadata without MM indivs
ssw_meta_Int <- subset(ssw_meta, ssw_meta$Location != "SUB") #removing SUB indivs
ssw_meta <- ssw_meta[order(ssw_meta$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
Int_gl$ind.names
ssw_meta_Int$Individual
Int_gl$pop <- ssw_meta_Int$Location # assign locality info
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
disease.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(disease.dapc, grp=Int_gl$other$Trajectory, legend=T)
compoplot(disease.dapc)
loadingplot(abs(disease.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(disease.dapc$var.load), probs=0.999))
disease.dapc$var.load
sum(abs(disease.dapc$var.load) > 0.02)
str(disease.dapc)
Pred_SNPS <- disease.dapc[(abs(disease.dapc$var.load) > 0.02)]
str(Pred_SNPS)
abs(disease.dapc$var.load)
cbind(disease.dapc$pca.cent,abs(disease.dapc$var.load))
cbind(disease.dapc$pca.cent,abs(disease.dapc$var.load[,1]))
x<-cbind(disease.dapc$pca.cent,abs(disease.dapc$var.load[,1]))
head(x)
x<-cbind(disease.dapc$pca.cent[,1],abs(disease.dapc$var.load[,1]))
disease.dapc$pca.cent
x<-cbind(row.names(disease.dapc$pca.cent),abs(disease.dapc$var.load[,1]))
x
rowNames(disease.dapc$pca.cent)
?rownames
rownames(disease.dapc$pca.cent)
x<-cbind(disease.dapc$pca.cent,abs(disease.dapc$var.load[,1]))
head(x)
str(x)
str(disease.dapc)
names(disease.dapc$pca.cent)
str(disease.dapc)
str(Int_gl)
str(disase.dapca)
str(disase.dapc)
str(disease.dapc)
disease.dapc$var.contr
hist(disease.dapc$var.contr[,1])
str(disease.dapc)
str(Int_gl)
posdat<-data.frame(Int_gl$loc.names,Int_gl$position)
head(posdat)
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position)
x<-cbind(locname=names(disease.dapc$pca.cent),abs(disease.dapc$var.load[,1]))
head(x)
x<-data.frame(cbind(locname=names(disease.dapc$pca.cent),abs(disease.dapc$var.load[,1])))
head(x)
names(posdat)
sub<-posdat[posdat$locname %in% x$locname,]
dim(posdat)
dim(sub)
dim(x)
head(x)
Pred_SNPS<- subset(x, x[,2]>0.02)
str9X
STR(X)
str(x)
x[,2] <- as.numeric(x[,2])
Pred_SNPS<- subset(x, x[,2]>0.02)
dim(Pred_SNPS)
head(Pred_SNPS)
x<-data.frame(cbind(locname=names(disease.dapc$pca.cent),abs(disease.dapc$var.load[,1])))
x[,2] <- as.numeric(as.character(x[,2]))
x[,2]
Pred_SNPS<- subset(x, x[,2]>0.02)
dim(Pred_SNPS)
sub<-posdat[posdat$locname %in% Pred_SNPS$locname,]
dim(Pred_SNPS)
head(Pred_SNPS)
sub
all_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_nomm_allbi_maf.02_miss.8.recode.vcf.gz")
all_gl <- vcfR2genlight(all_vcf)
print(all_gl)
Int_gl$ind.names
Int_gl$loc.names[1:10]
Int_gl$chromosome[1:3]
Int_gl$pop <- ssw_meta_Int$Location # assign locality info
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
# Set your working directory to where you downloaded your results files:
setwd("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project")
#loading libraries
library(vcfR)
library(adegenet)
#Read the vcf SNP data into R
Int_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_int_allbi_maf.02_miss.8.recode.vcf")
all_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_nomm_allbi_maf.02_miss.8.recode.vcf.gz")
# The adegenet package uses a highly efficient way of storing large SNP datasets in R called a "genlight" object. The following function creates a genlight object from your vcf:
Int_gl <- vcfR2genlight(Int_vcf)
print(Int_gl) # Looks good! Right # of SNPs and individuals!
all_gl <- vcfR2genlight(all_vcf)
print(all_gl) # Looks good! Right # of SNPs and individuals!
# Int_gl Info:
Int_gl$ind.names
Int_gl$loc.names[1:10]
Int_gl$chromosome[1:3]
# Reading in and organizing metadata to match the vcf files
#ssw_meta <- read.table("ssw_healthloc.txt", header=T) ## didn't do this. instead i manually removed MM indivs in textwrangler.
ssw_meta <- read.table("ssw_healthloc_noMM.txt", header=T) # read in the metadata without MM indivs
ssw_meta_Int <- subset(ssw_meta, ssw_meta$Location != "SUB") #removing SUB indivs
ssw_meta <- ssw_meta[order(ssw_meta$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
# Confirm the ID's are ordered the same in Int_gl1 and ssw_meta:
Int_gl$ind.names
ssw_meta_Int$Individual
all_gl$ind.names
ssw_meta$Individual
Int_gl$pop <- ssw_meta_Int$Location # assign locality info
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
all_gl$pop <- ssw_meta$Location # assign locality info
all_gl$other <- as.list(ssw_meta) # assign disease status
local.dapc <- dapc(all_vcf, pop=all_vcf$other$Location, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
all_gl <- vcfR2genlight(all_vcf)
local.dapc <- dapc(all_gl, pop=all_gl$other$Location, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
all_gl$pop <- ssw_meta$Location # assign locality info
all_gl$other <- as.list(ssw_meta) # assign disease status
local.dapc <- dapc(all_gl, pop=all_gl$other$Location, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(local.dapc, grp=all_gl$other$Location, legend=T)
compoplot(local.dapc)
local.dapc <- dapc(all_gl, pop=all_gl$other$Location$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
local.dapc <- dapc(all_gl, pop=all_gl$other$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(local.dapc, grp=all_gl$other$Trajectory, legend=T)
compoplot(local.dapc)
loadingplot(abs(local.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(local.dapc$var.load), probs=0.999))
local.dapc$var.load
(abs(local.dapc$var.load), probs=0.999)
(local.dapc$var.load), probs=0.999)
sum(abs(disease.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(disease.dapc$pca.cent),abs(disease.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
Pred_SNPS_int<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(Pred_SNPS_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
sub<-posdat[posdat$locname %in% Pred_SNPS$locname,] #matching names in Pred_SNPs
head(Pred_SNPS_int)
dim(Pred_SNPS_int)
sum(abs(intertidal.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(intertidal.dapc$pca.cent),abs(intertidal.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
Pred_SNPS_int<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(Pred_SNPS_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
sub<-posdat[posdat$locname %in% Pred_SNPS_int$locname,] #matching names in Pred_SNPs
head(Pred_SNPS_int)
dim(Pred_SNPS_int)
head(Pred_SNPS_int)
sum(abs(intertidal.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
# Scatterplot of results
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T)
# Plot the posterior assignment probabilities to each group
compoplot(intertidal.dapc)
# Which loci contribute the most to distinguishing Healthy vs. Sick individuals?
loadingplot(abs(intertidal.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(intertidal.dapc$var.load), probs=0.999))
sum(abs(intertidal.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(intertidal.dapc$pca.cent),abs(intertidal.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
Pred_SNPS_int<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(Pred_SNPS_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
sub<-posdat[posdat$locname %in% Pred_SNPS_int$locname,] #matching names in Pred_SNPS_int
head(Pred_SNPS_int)
dim(Pred_SNPS_int)
sum(abs(intertidal.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(intertidal.dapc$pca.cent),abs(intertidal.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
Pred_SNPS_int<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(Pred_SNPS_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
sub<-posdat[posdat$locname %in% Pred_SNPS_int$locname,] #matching names in Pred_SNPS_int
head(Pred_SNPS_int)
dim(Pred_SNPS_int)
all.dapc <- dapc(all_gl, pop=all_gl$other$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
# Scatterplot of results
scatter.dapc(all.dapc, grp=all_gl$other$Trajectory, legend=T)
# Plot the posterior assignment probabilities to each group
compoplot(all.dapc)
loadingplot(abs(all.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(all.dapc$var.load), probs=0.999))
sum(abs(all.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
sum(abs(all.dapc$var.load) > 0.17) #to figure out how many SNPS i should have in new dataset
sum(abs(all.dapc$var.load) > 0.017) #to figure out how many SNPS i should have in new dataset
sum(abs(all.dapc$var.load) > 0.018) #to figure out how many SNPS i should have in new dataset
View(fst)
sum(abs(intertidal.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(intertidal.dapc$pca.cent),abs(intertidal.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
Pred_SNPS_int<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(Pred_SNPS_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
sub<-posdat[posdat$locname %in% Pred_SNPS_int$locname,] #matching names in Pred_SNPS_int
head(Pred_SNPS_int)
dim(Pred_SNPS_int)
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=3,
var.loadings=T, pca.info=T, parallel=F)
dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T)
compoplot(intertidal.dapc)
loadingplot(abs(intertidal.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(intertidal.dapc$var.load), probs=0.999))
sum(abs(intertidal.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(intertidal.dapc$pca.cent),abs(intertidal.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
Pred_SNPS_int<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(Pred_SNPS_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
sub<-posdat[posdat$locname %in% Pred_SNPS_int$locname,] #matching names in Pred_SNPS_int
head(Pred_SNPS_int)
dim(Pred_SNPS_int)
posdat
head(posdat)
head(Pred_SNPS_int)
Pred_SNPS_int$locname
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
Pred_SNPS_int<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(Pred_SNPS_int)
Pred_SNPS_int$locname
Pred_SNPS_int<- drop.levels(subset(x, x[,2]>0.02)) #creating dataset of subsetted x based on criteria of >0.02 var.load
Pred_SNPS_int<- droplevels(subset(x, x[,2]>0.02)) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(Pred_SNPS_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
sub<-posdat[posdat$locname %in% Pred_SNPS_int$locname,] #matching names in Pred_SNPS_int
head(Pred_SNPS_int)
dim(Pred_SNPS_int)
dim(Pred_SNPS_int)
head(sub)
setwd("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project")
library(vcfR)
library(adegenet)
Int_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_int_allbi_maf.02_miss.8.recode.vcf")
all_vcf <- read.vcfR("~/Documents/2017_Ecological_genomics_Pbio381/SSWD Project/SSW_nomm_allbi_maf.02_miss.8.recode.vcf.gz")
Int_gl <- vcfR2genlight(Int_vcf)
print(Int_gl) # Looks good! Right # of SNPs and individuals!
all_gl <- vcfR2genlight(all_vcf)
print(all_gl) # Looks good! Right # of SNPs and individuals!
Int_gl$ind.names
Int_gl$loc.names[1:10]
Int_gl$chromosome[1:3]
ssw_meta <- read.table("ssw_healthloc_noMM.txt", header=T) # read in the metadata without MM indivs
ssw_meta_Int <- subset(ssw_meta, ssw_meta$Location != "SUB") #removing SUB indivs
ssw_meta <- ssw_meta[order(ssw_meta$Individual),] # sort by Individual ID, just like the VCF file
ssw_meta_Int <- ssw_meta_Int[order(ssw_meta_Int$Individual),] # sort by Individual ID, just like the VCF file
Int_gl$ind.names
ssw_meta_Int$Individual
all_gl$ind.names
ssw_meta$Individual
Int_gl$pop <- ssw_meta_Int$Location # assign locality info
Int_gl$other <- as.list(ssw_meta_Int) # assign disease status
all_gl$pop <- ssw_meta$Location # assign locality info
all_gl$other <- as.list(ssw_meta) # assign disease status
glPlot(Int_gl, posi="bottomleft")
glPlot(all_gl, posi="bottomleft")
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T)
compoplot(intertidal.dapc)
loadingplot(abs(intertidal.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(intertidal.dapc$var.load), probs=0.999))
sum(abs(intertidal.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(intertidal.dapc$pca.cent),abs(intertidal.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x<-data.frame(cbind(locname=names(intertidal.dapc$pca.cent),abs(intertidal.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
p_snps_int<- droplevels(subset(x, x[,2]>0.02)) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(p_snps_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
Int_SNPS<-posdat[posdat$locname %in% p_snps_int$locname,] #matching names in Pred_SNPS_int. THIS IS WHAT I WANT.
head(Int_SNPS)
Int_SNPS
View(fst)
all.dapc <- dapc(all_gl, pop=all_gl$other$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
Int_SNPS
install.packages("vegan")
install.packages("vegan")
library(vegan)
library(vegan)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T)
compoplot(intertidal.dapc)
loadingplot(abs(intertidal.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(intertidal.dapc$var.load), probs=0.999))
sum(abs(intertidal.dapc$var.load) > 0.02) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(intertidal.dapc$pca.cent),abs(intertidal.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
p_snps_int<- droplevels(subset(x, x[,2]>0.02)) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(p_snps_int) #making sure we have 11 SNPs
posdat<-data.frame(locname=Int_gl$loc.names,position=Int_gl$position) #pulling names from original dataset
Int_SNPS<-posdat[posdat$locname %in% p_snps_int$locname,] #matching names in p_snps_int
Int_SNPS
Int_fst <- read.table("HvS_int_fst.weir.fst",header=T)
str(Int_fst)
Int_fst
View(Int_fst)
View(Int_SNPS)
print(Int_gl) # Looks good! Right # of SNPs and individuals!
Int_fst <- read.table("HvS_int_fst.weir.fst",header=T)
str(Int_fst)
Int_fst
View(Int_fst)
Int_SNPS
names(posdat)
head(posdat)
head(Int_SNPS)
test<-posdat[posdat$locname %in% Int_SNPS$locname,]
test
test<-Int_SNPS[Int_SNPS$locname %in% posdat$locname,]
test
inner_join(Int_SNPS,posdat,by="locname")
library(dplyr)
inner_join(Int_SNPS,posdat,by="locname")
inner_join(Int_fst,posdat,by="locname")
names(Int_fst)
head(Int_fst)
names(Int_fst)[1]<-"locname"
inner_join(Int_fst,posdat,by="locname")
str(Int_fst)
Int_SNPS
write.table(Int_SNPS$locname, "Int_SNPS.txt", quote = FALSE, row.names = FALSE)
sum(abs(all.dapc$var.load) > 0.018) #to figure out how many SNPS i should have in new dataset
x<-data.frame(cbind(locname=names(all.dapc$pca.cent),abs(all.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x[,2] <- as.numeric(as.character(x[,2])) #changing the second column (loadings) from factor to number
pred_snps_all<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(pred_snps_all) #making sure we have 11 SNPs
posdat<-data.frame(locname=all_gl$loc.names,position=all_gl$position) #pulling names from original dataset
All_SNPS<-posdat[posdat$locname %in% pred_snps_all$locname,] #matching names in Pred_SNPs
head(Pred_SNPS)
All_SNPS
all.dapc <- dapc(all_gl, pop=all_gl$other$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
# Scatterplot of results
scatter.dapc(all.dapc, grp=all_gl$other$Trajectory, legend=T)
# Plot the posterior assignment probabilities to each group
compoplot(all.dapc)
# Which loci contribute the most to distinguishing H vs S in both locations?
loadingplot(abs(all.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(all.dapc$var.load), probs=0.999))
sum1(abs(all.dapc$var.load) > 0.018) #to figure out how many SNPS i should have in new dataset
x1<-data.frame(cbind(locname=names(all.dapc$pca.cent),abs(all.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x1[,2] <- as.numeric(as.character(x1[,2])) #changing the second column (loadings) from factor to number
pred_snps_all<- subset(x, x[,2]>0.02) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(pred_snps_all) #making sure we have 11 SNPs
sum1(abs(all.dapc$var.load) > 0.018) #to figure out how many SNPS i should have in new dataset
x1<-data.frame(cbind(locname=names(all.dapc$pca.cent),abs(all.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x1[,2] <- as.numeric(as.character(x1[,2])) #changing the second column (loadings) from factor to number
pred_snps_all<- subset(x, x[,2]>0.017) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(pred_snps_all)
posdat<-data.frame(locname=all_gl$loc.names,position=all_gl$position) #pulling names from original dataset
All_SNPS<-posdat[posdat$locname %in% pred_snps_all$locname,] #matching names in Pred_SNPs
All_SNPS
quantile(abs(all.dapc$var.load), probs=0.999)
pred_snps_all<- subset(x, x[,2]>0.0176) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(pred_snps_all)
posdat<-data.frame(locname=all_gl$loc.names,position=all_gl$position) #pulling names from original dataset
All_SNPS<-posdat[posdat$locname %in% pred_snps_all$locname,] #matching names in Pred_SNPs
ALL_SNPS
sum1(abs(all.dapc$var.load) > 0.018) #to figure out how many SNPS i should have in new dataset
x1<-data.frame(cbind(locname=names(all.dapc$pca.cent),abs(all.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x1[,2] <- as.numeric(as.character(x1[,2])) #changing the second column (loadings) from factor to number
pred_snps_all<- subset(x, x[,2]>0.0176) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(pred_snps_all)
posdat<-data.frame(locname=all_gl$loc.names,position=all_gl$position) #pulling names from original dataset
All_SNPS<-posdat[posdat$locname %in% pred_snps_all$locname,] #matching names in Pred_SNPs
ALL_SNPS
All_SNPS
dim(All_SNPS)
overlap <- as.data.frame(All_SNPS %in% Int_SNPS)
overlap
Int_SNPS
overlap <- as.data.frame(All_SNPS$locname %in% Int_SNPS$locname)
overlap
loadingplot(abs(all.dapc$var.load),
lab.jitter=1,
threshold=quantile(abs(all.dapc$var.load), probs=0.99))
sum1(abs(all.dapc$var.load) > quantile(abs(all.dapc$var.load), probs=0.99)) #to figure out how many SNPS i should have in new dataset
sum(abs(all.dapc$var.load) > quantile(abs(all.dapc$var.load), probs=0.99)) #to figure out how many SNPS i should have in new dataset
x1<-data.frame(cbind(locname=names(all.dapc$pca.cent),abs(all.dapc$var.load[,1]))) #dataframe with dapc names and loadings
x1[,2] <- as.numeric(as.character(x1[,2])) #changing the second column (loadings) from factor to number
pred_snps_all<- subset(x, x[,2] > quantile(abs(all.dapc$var.load), probs=0.99)) #creating dataset of subsetted x based on criteria of >0.02 var.load
dim(pred_snps_all)
posdat<-data.frame(locname=all_gl$loc.names,position=all_gl$position) #pulling names from original dataset
All_SNPS<-posdat[posdat$locname %in% pred_snps_all$locname,] #matching names in Pred_SNPs
overlap <- as.data.frame(All_SNPS$locname %in% Int_SNPS$locname)
overlap
