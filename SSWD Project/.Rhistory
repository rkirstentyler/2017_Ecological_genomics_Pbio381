which_replace <- which(RR1$Intro_range == "AUS")
RR1$Intro_PD[which_replace] <- 0.663
head(RR1)
which_replace <- which(RR1$Intro_range == "NAM")
RR1$Intro_PD[which_replace] <- 0.614
which_replace <- which(RR1$Intro_range == "EU")
RR1$Intro_PD[which_replace] <- 0.542
which_replace <- which(RR1$Intro_range == "ME")
RR1$Intro_PD[which_replace] <- 0.518
which_replace <- which(RR1$Intro_range == "AS")
RR1$Intro_PD[which_replace] <- 0.694
which_replace <- which(RR1$Intro_range == "IND")
RR1$Intro_PD[which_replace] <- 0.65
which_replace <- which(RR1$Intro_range == "PI")
RR1$Intro_PD[which_replace] <- 0.74
which_replace <- which(RR1$Intro_range == "NZ")
RR1$Intro_PD[which_replace] <- 0.442
which_replace <- which(RR1$Intro_range == "AUS")
RR1$Intro_PD[which_replace] <- 0.663
which_replace <- which(RR1$Intro_range == "INDO")
RR1$Intro_PD[which_replace] <- 0.61
which_replace <- which(RR1$Intro_range == "SAFR")
RR1$Intro_PD[which_replace] <- 0.601
which_replace <- which(RR1$Intro_range == "AFR")
RR1$Intro_PD[which_replace] <- 0.68
which_replace <- which(RR1$Intro_range == "ATLI")
RR1$Intro_PD[which_replace] <- 0.459
which_replace <- which(RR1$Intro_range == "SAM")
RR1$Intro_PD[which_replace] <- 0.684
which_replace <- which(RR1$Intro_range == "CAR")
RR1$Intro_PD[which_replace] <- 0.712
which_replace <- which(RR1$Intro_range == "CAM")
RR1$Intro_PD[which_replace] <- 0.655
head(RR1)
summary(RR1)
RR1$Diff_PD <- (RR1$Origin_PD - RR1$Intro_PD)
head(RR1)
R_base<-ggplot(RR1, aes(Diff_PD,Inv)) + geom_point()
library(ggplot2)
R_base<-ggplot(RR1, aes(Diff_PD,Inv)) + geom_point()
R_base
R_base + geom_smooth(method=lm)
R0<-lm(Inv ~ Origin_PD, data=RR1)
par(mfrow=c(1,3))
plot(R0, which=1)
plot(R0, which=2)
Errors<-residuals(R0)
hist(Errors)
boxplot(RR1$Inv~RR1$Diff_PD)
R1<-glm(Inv~Diff_PD, family = binomial(link = logit), data=RR1)
summary(R1)
R_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x)
R_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "probit")), formula=y ~ x) #slightly different curve shape
R_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "cloglog")), formula=y ~ x)#for different numbers of 0s and 1s (the others assume roughly equal numbers of 0s and 1s) - assymetrial sigmoidal curve
100*(R1$null.deviance - R1$deviance)/R1$null.deviance
R1$deviance/R1$df.residual
boar<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data/Data_04_04_GLM/Boar.txt", header = TRUE, dec = ".")
head(boar)
wb_base<-ggplot(boar, aes(LengthCT,Tb)) + geom_point() + theme_bw()
wb_base
wb_base + geom_smooth(method="lm")
boar.lm<-lm(boar$Tb~boar$LengthCT)
par(mfrow=c(1,3))
plot(boar.lm, which=1:2)
boxplot(boar$LengthCT~boar$Tb)
B1<-glm(Tb~LengthCT, family = binomial(link = logit), data=boar)
summary(B1)
wb_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x)
wb_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "probit")), formula=y ~ x) #slightly different curve shape
wb_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "cloglog")), formula=y ~ x)#for different numbers of 0s and 1s (the others assume roughly equal numbers of 0s and 1s) - assymetrial sigmoidal curve
par(mfrow=c(2,2))
plot(B1)
R2 <- glm(Inv ~ Diff_PD, family = quasibinomial(link = "logit"), data = RR1)
summary(R2)
RR_base<-ggplot(RR1, aes(Origin_PD,Inv)) + geom_point() + theme_bw()
RR_base
RR_base +
stat_smooth(method="glm", method.args=list(family=quasibinomial()), formula=y ~ x)
par(mfrow=c(1,1))
RRData <- data.frame(Origin_PD = seq(from = min(RR1$Origin_PD),
to = max(RR1$Origin_PD),by=0.01))
PRR1 <- predict(R2, newdata = RRData, type = "link", se = TRUE)
par(mfrow=c(1,1))
RRData <- data.frame(Diff_PD = seq(from = min(RR1$Diff_PD),
to = max(RR1$Diff_PD),by=0.01))
PRR1 <- predict(R2, newdata = RRData, type = "link", se = TRUE)
plot(RRData$Diff_PD,exp(PRR1$fit)/(1+exp(PRR1$fit)),
type="l",ylim=c(0,1),
xlab="Diff PD",
ylab="Probability of being Invasive")
plot(RRData$Diff_PD,exp(PRR1$fit)/(1+exp(PRR1$fit)),
type="l",ylim=c(0,1),
xlab="Diff PD",
ylab="Probability of being Invasive")
lines(RRData$Diff_PD,exp(PRR1$fit+1.96*PRR1$se.fit)/
(1+exp(P1$fit+1.96*PRR1$se.fit)),lty=2)
lines(RRData$Diff_PD,exp(PRR1$fit-1.96*PRR1$se.fit)/
(1+exp(PRR1$fit-1.96*PRR1$se.fit)),lty=2)
points(RR1$Diff_PD,RR1$Inv)
ED<-resid(R2,type="deviance")
pr<-predict(R2,type="link")
tpr<-exp(pr)/(1+exp(pr))
qplot(x=tpr,y=RR1$Inv, main="observed v predicted") +
geom_abline(slope=1)
qplot(tpr,ED,main="deviance residuals")
qplot(RR1$Origin_PD,ED,main="deviance residuals")
cod<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data_04_04_GLM/ParasiteCod.txt", header = TRUE, dec = ".")
head(cod)
cod<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data/Data_04_04_GLM/ParasiteCod.txt", header = TRUE, dec = ".")
head(cod)
c_base<-ggplot(cod, aes(Length,Prevalence)) + geom_point() + theme_bw()
c_base
cod$fArea <- factor(cod$Area)
cod$fYear <- factor(cod$Year)
P1 <- glm(Prevalence ~ fArea*fYear + Length, family = binomial(link = logit), data=cod)
summary(P1)
deer<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data/Data_04_04_GLM/Tbdeer.txt", header = TRUE, dec = ".")
head(deer)
deer<-na.omit(deer)
deer$DeerNegCervi <- deer$DeerSampledCervi - deer$DeerPosCervi
deer$fFenced <- factor(deer$Fenced)
Deer1=glm(cbind(DeerPosCervi, DeerNegCervi) ~ OpenLand,
family = binomial(link = "logit"), data = deer)
deer$DeerPosProp <-deer$DeerPosCervi / deer$DeerSampledCervi
Deer2 <- glm(DeerPosProp ~ OpenLand, family = binomial(link = "logit"),
weights = DeerSampledCervi, data = deer)
summary(Deer2)
summary(Deer1)
100*(Deer2$null.deviance - Deer2$deviance)/Deer2$null.deviance
Deer2$deviance/Deer2$df.residual
plot(RRData$Diff_PD,exp(PRR1$fit)/(1+exp(PRR1$fit)),
type="l",ylim=c(0,1),
xlab="Diff PD",
ylab="Probability of being Invasive")
library(ggplot2)
RR_data_new <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Final Project/RR_data_new.csv", header = TRUE)
RR_data_new[1:751, 1:18 ][is.na(RR_data_new[1:751, 1:18])] <- 0 #this worked!
head(RR_data)
str(RR_data_new)
head(RR_data_new)
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=10, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T) #DA eigenvalues
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=11, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T) #DA eigenvalues
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=9, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T) #DA eigenvalues
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=12, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T) #DA eigenvalues
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=13, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T) #DA eigenvalues
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=15, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T) #DA eigenvalues
varexpl
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
intertidal.dapc$pca.eig #amt of variation ecxplained by each PC band. we see that 97% of the variation is explained in 14 bands. we'd like to see all the variation explained so we will use all 15 bands.
intertidal.dapc$eig
Int_gl$other$Trajectory #levels: 1. HH, 2. HS, 3. SS
scatter.dapc(intertidal.dapc, grp=Int_gl$other$Trajectory, legend=T) #DA eigenvalues
intertidal.dapc$eig
Int_gl$other$Trajectory #levels: 1. HH, 2. HS, 3. SS
intertidal.dapc$ind.coord
intertidal.dapc$match.prp
intertidal.dapc$var.contr
summary(intertidal.dapc)
xval_int_dapc <- xvalDapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca.max = 15, n.da = NULL,
training.set = 0.9, result = c("groupMean", "overall"),
center = TRUE, scale = FALSE,
n.pca=NULL, n.rep = 30, xval.plot = TRUE)
xval_int_dapc <- xvalDapc(Int_gl, grp=Int_gl$other$Trajectory, n.pca.max = 15, n.da = NULL,
training.set = 0.9, result = c("groupMean", "overall"),
center = TRUE, scale = FALSE,
n.pca=NULL, n.rep = 30, xval.plot = TRUE)
xval_int_dapc <- xvalDapc(Int_gl, grp=Int_gl$other$Trajectory, n.pca.max = 15, n.da = NULL,
training.set = 0.9, result = c("groupMean", "overall"),
n.pca=NULL, n.rep = 30, xval.plot = TRUE)
xval_int_dapc <- xvalDapc(Int_gl, grp=Int_gl$other$Trajectory, n.pca.max = 15, n.da = NULL,
training.set = 0.9, result = c("groupMean", "overall"),
n.pca=NULL, n.rep = 30)
xval_int_dapc <- xvalDapc(Int_gl, grp=Int_gl$other$Trajectory, n.pca.max = 15,                  n.da = NULL, training.set = 0.9, result = c("groupMean", "overall"), center = FALSE, scale = FALSE, n.pca=NULL, n.rep = 30, xval.plot = TRUE) #trying to decide how many PCA axes to retain with the cross validation method
xval_int_dapc <- xvalDapc(Int_gl, grp=Int_gl$other$Trajectory, n.pca.max = 15,                  n.da = NULL, training.set = 0.6, result = c("groupMean", "overall"), center = FALSE, scale = FALSE, n.pca=NULL, n.rep = 30, xval.plot = TRUE) #trying to decide how many PCA axes to retain with the cross validation method
xval_int_dapc <- xvalDapc(Int_gl, grp=Int_gl$other$Trajectory, n.pca.max = 15,                  n.da = NULL, training.set = 0.5, result = c("groupMean", "overall"), center = FALSE, scale = FALSE, n.pca=NULL, n.rep = 30, xval.plot = TRUE) #trying to decide how many PCA axes to retain with the cross validation method
xval_int_dapc <- xvalDapc(Int_gl, grp=Int_gl$other$Trajectory, n.pca.max = 15,                  n.da = NULL, training.set = 0.4, result = c("groupMean", "overall"), center = FALSE, scale = FALSE, n.pca=NULL, n.rep = 30, xval.plot = TRUE) #trying to decide how many PCA axes to retain with the cross validation method
xval_int_dapc <- xvalDapc(Int_gl, grp=Int_gl$other$Trajectory, n.pca.max = 10,                  n.da = NULL, training.set = 0.9, result = c("groupMean", "overall"), center = FALSE, scannf = TRUE, scale = FALSE, n.pca=NULL, n.rep = 30, xval.plot = TRUE) #trying to decide how many PCA axes to retain with the cross validation method
intertidal.dapc$pca.eig
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=15, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
summary(intertidal.dapc)
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
summary(intertidal.dapc)
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=15, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
intertidal.dapc$pca.eig #amt of variation ecxplained by each PC band. we see that 97% of the variation is explained in 14 bands. we'd like to see all the variation explained so we will use all 15 bands. however, we are getting too many significant snps when using 15 bands.
summary(intertidal.dapc)
totaleig <- sum(intertidal.dapc$pca.eig)
first8eig <- sum(16.061225, 14.986533, 14.719689, 14.539856, 14.465510, 13.910824, 13.490920, 13.197774)
varexpl <- first8eig / totaleig #variation explained by first 8 PC bands
varexpl
intertidal.dapc <- dapc(Int_gl, pop=Int_gl$other$Trajectory, n.pca=8, n.da=2,
var.loadings=T, pca.info=T, parallel=F)
summary(intertidal.dapc)
intertidal.dapc
intertidal.dapc$eig #eigenvalues for intertidal.dapc
library(ggplot2)
RR_data_new <- read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Final Project/RR_data_new.csv", header = TRUE)
head(RR_data_new)
str(RR_data_new)
```
*Cleaning up the data*
Replacing NAs with 0:
```{r}
#RR_data[is.na(RR_data)] <- 0 #this adds more rows to the dataset so I'm trying something else
RR_data_new[1:751, 1:18 ][is.na(RR_data_new[1:751, 1:18])] <- 0 #this worked!
```
library(reshape2)
RR1 <- melt(RR_data_new, id.vars = c("Species", "Life_form", "Origin_PD"),
measure.vars = c("NAM", "EU", "ME", "AS", "IND", "PI", "NZ", "AUS", "INDO", "SAFR", "AFR", "ATLI", "SAM", "CAR", "CAM"),
variable.name = "Intro_range",
value.name = "Inv")
```
RR1$Intro_PD = rep(NA, nrow(RR1))
head(RR1)
which_replace <- which(RR1$Intro_range == "NAM")
RR1$Intro_PD[which_replace] <- 0.614
which_replace <- which(RR1$Intro_range == "EU")
RR1$Intro_PD[which_replace] <- 0.542
which_replace <- which(RR1$Intro_range == "ME")
RR1$Intro_PD[which_replace] <- 0.518
which_replace <- which(RR1$Intro_range == "AS")
RR1$Intro_PD[which_replace] <- 0.694
which_replace <- which(RR1$Intro_range == "IND")
RR1$Intro_PD[which_replace] <- 0.65
which_replace <- which(RR1$Intro_range == "PI")
RR1$Intro_PD[which_replace] <- 0.74
which_replace <- which(RR1$Intro_range == "NZ")
RR1$Intro_PD[which_replace] <- 0.442
which_replace <- which(RR1$Intro_range == "AUS")
RR1$Intro_PD[which_replace] <- 0.663
which_replace <- which(RR1$Intro_range == "INDO")
RR1$Intro_PD[which_replace] <- 0.61
which_replace <- which(RR1$Intro_range == "SAFR")
RR1$Intro_PD[which_replace] <- 0.601
which_replace <- which(RR1$Intro_range == "AFR")
RR1$Intro_PD[which_replace] <- 0.68
which_replace <- which(RR1$Intro_range == "ATLI")
RR1$Intro_PD[which_replace] <- 0.459
which_replace <- which(RR1$Intro_range == "SAM")
RR1$Intro_PD[which_replace] <- 0.684
which_replace <- which(RR1$Intro_range == "CAR")
RR1$Intro_PD[which_replace] <- 0.712
which_replace <- which(RR1$Intro_range == "CAM")
RR1$Intro_PD[which_replace] <- 0.655
summary(RR1)
```
RR1$Diff_PD <- (RR1$Origin_PD - RR1$Intro_PD) #the difference between origin pd and intro pd. this is saying if the number is negative, then the intro pd is larger than the origin pd (and i'm predicting that Inv will be 0 for those)
head(RR1)
R_base<-ggplot(RR1, aes(Diff_PD,Inv)) + geom_point()
R_base
R_base + geom_smooth(method=lm)
R0<-lm(Inv ~ Origin_PD, data=RR1)
par(mfrow=c(1,3))
plot(R0, which=1)
plot(R0, which=2)
Errors<-residuals(R0)
hist(Errors)
R1<-glm(Inv~Diff_PD, family = binomial(link = logit), data=RR1)
summary(R1)
R_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x)
R_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "probit")), formula=y ~ x) #slightly different curve shape
R2 <- glm(Inv ~ Diff_PD, family = quasibinomial(link = "logit"), data = RR1)
summary(R2)
RR_base<-ggplot(RR1, aes(Origin_PD,Inv)) + geom_point() + theme_bw()
RR_base
RR_base +
stat_smooth(method="glm", method.args=list(family=quasibinomial()), formula=y ~ x)
RR_base<-ggplot(RR1, aes(Diff_PD,Inv)) + geom_point() + theme_bw()
RR_base
RR_base +
stat_smooth(method="glm", method.args=list(family=quasibinomial()), formula=y ~ x)
View(RR_data_new)
head(RR1)
summary(R2)
range_plot <- ggplot(RR1, aes(x=Diff_PD, y=Inv, group=Intro_range)) + geom_boxplot(aes(fill=Diff_PD))
range_plot
range_plot <- ggplot(RR1, aes(x=Diff_PD, y=Inv, group=Intro_range)) + sp + facet_grid(Intro_range) ~ .))
range_plot <- ggplot(RR1, aes(x=Diff_PD, y=Inv, group=Intro_range)) + sp + facet_grid(Intro_range) ~ .)
range_plot <- ggplot(RR1, aes(x=Diff_PD, y=Inv, group=Intro_range)) + sp + facet_grid(Intro_range ~ .)
range_plot <- ggplot(RR1, aes(x=Diff_PD, y=Inv, group=Intro_range)) + facet_grid(Intro_range ~ .)
range_plot
range_plot <- ggplot(RR1, aes(x=Diff_PD, y=Inv, group=Intro_range)) + geom_point(aes(fill=Diff_PD) + facet_grid(Intro_range ~ .))
R_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x) + facet_wrap( ~ Intro_range)
R1<-glm(Inv~Diff_PD + Life_form, family = binomial(link = logit), data=RR1)
summary(R1)
R_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x)
R_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "probit")), formula=y ~ x) #slightly different curve shape
R_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x) + facet_wrap( ~ Intro_range)
R1<-glm(Inv~Diff_PD, family = binomial(link = logit), data=RR1)
summary(R1)
R_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x)
R_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "probit")), formula=y ~ x) #slightly different curve shape
plot(RRData$Diff_PD,exp(PRR1$fit)/(1+exp(PRR1$fit)),
type="l",ylim=c(0,1),
xlab="Diff PD",
ylab="Probability of being Invasive")
lines(RRData$Diff_PD,exp(PRR1$fit+1.96*PRR1$se.fit)/
(1+exp(P1$fit+1.96*PRR1$se.fit)),lty=2)
lines(RRData$Diff_PD,exp(PRR1$fit-1.96*PRR1$se.fit)/
(1+exp(PRR1$fit-1.96*PRR1$se.fit)),lty=2)
points(RR1$Diff_PD,RR1$Inv)
R3<-glm(Inv~Diff_PD*fIntro_range, family = binomial(link = logit), data=RR1)
RR1$fIntro_range <- factor(RR1$Intro_range)
R3<-glm(Inv~Diff_PD*fIntro_range, family = binomial(link = logit), data=RR1)
summary(R3)
summary(R1)
R3<-glm(Inv~Diff_PD, random = ~1 | fIntro_range, family = binomial(link = logit), data=RR1)
RR1$fIntro_range <- factor(RR1$Intro_range)
R3<-glm(Inv~Diff_PD, random = ~1 | fIntro_range, family = binomial(link = logit), data=RR1)
R3<-glmr(Inv~Diff_PD, random = ~1 | fIntro_range, family = binomial(link = logit), data=RR1)
library(glmr)
library(glmm)
R3<-glmer(Inv~Diff_PD, random = ~1 | fIntro_range, family = binomial(link = logit), data=RR1)
library(glmer)
library(lme4)
library(glmer)
R3<-glmer(Inv~Diff_PD, random = ~1 | fIntro_range, family = binomial(link = logit), data=RR1)
R3<-glmer(Inv~Diff_PD + (1 | fIntro_range), family = binomial(link = logit), data=RR1)
summary(R3)
exp(1.8238)/(1+exp(1.8238)
exp(1.8238)/(1+exp(1.8238))
plogis(fixef(R3)[[1]])
rikz<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data/Data_03_01_Random&Lab/RIKZ.txt", header = TRUE, dec = ".")
head(rikz)
names(rikz)
M0.lm<-lm(Richness ~ NAP, data=rikz)
E<-resid(M0.lm)
op<-par(mfrow=c(1,1),mar=c(3,3,2,2))
boxplot(E~Beach,data=rikz)
abline(0,0)
par(op) #resets the graphics to defaults
rikz$fBeach <- factor(rikz$Beach)
M1.lm<-lm(Richness ~ NAP*fBeach, data=rikz)
summary(M0.lm)
summary(M1.lm)
anova(M1.lm)
Mlme1 <- lme(Richness ~ NAP, random = ~1 | fBeach, data = rikz) #fitting the random intercept model. fBeach is the nominal factor
library(nlme)
M1.lm<-lm(Richness ~ NAP*fBeach, data=rikz)
Mlme1 <- lme(Richness ~ NAP, random = ~1 | fBeach, data = rikz) #fitting the random intercept model. fBeach is the nominal factor
F0<-fitted(Mlme1,level = 0) #level = 0 means we take the fitted values for the fixed portion of the model
F1<-fitted(Mlme1,level = 1) #level = 1 gives the within beach fitted values
I<-order(rikz$NAP) #row order from low to high of the NAP values
NAPs<-sort(rikz$NAP) #NAP values from low to high
#plots the overall relationship
plot(NAPs,F0[I],lwd=4,type="l",ylim=c(0,22),
ylab="Richness",xlab="NAP") #here, we use the order of NAP values to put the fitted values in the correct order to match the sorted NAP values
summary(Mlme1)
for (i in 1:9){
x1<-rikz$NAP[rikz$Beach==i]
y1<-F1[rikz$Beach==i]
K<-order(x1)
lines(sort(x1),y1[K])
}
text(rikz$NAP,rikz$Richness,rikz$Beach,cex=0.9)
for (i in 1:9){
x1<-rikz$NAP[rikz$Beach==i]
y1<-F1[rikz$Beach==i]
K<-order(x1)
lines(sort(x1),y1[K])
}
par(mfrow=c(1,1))
MyData <- data.frame(OpenLand = seq(from = min(deer$OpenLand),
to = max(deer$OpenLand),by=0.01))
P1 <- predict(Deer3, newdata = MyData, type = "link", se = TRUE)
plot(MyData$OpenLand,exp(P1$fit)/(1+exp(P1$fit)),
type="l",ylim=c(0,1),
xlab="Percentage open land",
ylab="Probability on E. cervi")
lines(MyData$OpenLand,exp(P1$fit+1.96*P1$se.fit)/
(1+exp(P1$fit+1.96*P1$se.fit)),lty=2)
lines(MyData$OpenLand,exp(P1$fit-1.96*P1$se.fit)/
(1+exp(P1$fit-1.96*P1$se.fit)),lty=2)
points(deer$OpenLand,deer$DeerPosProp)
plot <- plot(MyData$OpenLand,exp(P1$fit)/(1+exp(P1$fit)),
type="l",ylim=c(0,1),
xlab="Percentage open land",
ylab="Probability on E. cervi")
par(mfrow=c(1,1))
MyData <- data.frame(OpenLand = seq(from = min(deer$OpenLand),
to = max(deer$OpenLand),by=0.01))
P1 <- predict(Deer3, newdata = MyData, type = "link", se = TRUE)
plot <- plot(MyData$OpenLand,exp(P1$fit)/(1+exp(P1$fit)),
type="l",ylim=c(0,1),
xlab="Percentage open land",
ylab="Probability on E. cervi")
lines(MyData$OpenLand,exp(P1$fit+1.96*P1$se.fit)/
(1+exp(P1$fit+1.96*P1$se.fit)),lty=2)
lines(MyData$OpenLand,exp(P1$fit-1.96*P1$se.fit)/
(1+exp(P1$fit-1.96*P1$se.fit)),lty=2)
points(deer$OpenLand,deer$DeerPosProp)
sjp.glmer(R3, type = "fe.cor")
install.packages("sjPlot")
library(sjPlot)
sjp.glmer(R3, type = "fe.cor")
sjp.glmer(R3, type = "re.qq")
sjp.glmer(R3,
type = "ri.pc",
show.se = TRUE)
sjp.glmer(R3,
type = "ri.pc",
facet.grid = FALSE)
View(RR_data_new)
R1<-glm(Inv~Diff_PD, family = binomial(link = logit), data=RR1)
summary(R1)
rikz<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data/Data_03_01_Random&Lab/RIKZ.txt", header = TRUE, dec = ".")
head(rikz)
names(rikz)
M0.lm<-lm(Richness ~ NAP, data=rikz)
E<-resid(M0.lm)
op<-par(mfrow=c(1,1),mar=c(3,3,2,2))
boxplot(E~Beach,data=rikz)
abline(0,0)
par(op)
E0<-resid(R0)
op<-par(mfrow=c(1,1),mar=c(3,3,2,2))
boxplot(E0~Intro_PD,data=RR1)
abline(0,0)
par(op)
op<-par(mfrow=c(1,1),mar=c(3,3,2,2))
boxplot(E0~Intro_range,data=RR1)
abline(0,0)
par(op)
R1<-glm(Inv~Diff_PD, family = binomial(link = logit), data=RR1)
summary(R1)
R2<-glm(Inv~Diff_PD, family = binomial(link = logit), data=RR1)
summary(R1)
R2<-glm(Inv~Diff_PD = Life_form, family = binomial(link = logit), data=RR1)
R2<-glm(Inv~Diff_PD + Life_form, family = binomial(link = logit), data=RR1)
summary(R2)
E1<-resid(R1)
op1<-par(mfrow=c(1,1),mar=c(3,3,2,2))
boxplot(E1~Intro_range,data=RR1)
abline(0,0)
par(op)
summary(R3) #for random effects interpretations, see 3/2 tutorial line 74
R3<-glmer(Inv~Diff_PD + (1 | fIntro_range), family = binomial(link = logit), data=RR1)
summary(R3)
plogis(fixef(R3)[[1]])
sjp.glmer(R3, type = "re.qq") #Another diagnostic plot is the qq-plot for random effects. Use type = "re.qq" to plot random against standard quantiles. The dots should be plotted along the line.
sjp.glmer(R3,
type = "ri.pc",
show.se = TRUE) #These plotting functions have been implemented to easier interprete odds ratios, especially for continuous covariates, by plotting the probabilities of predictors.
sjp.glmer(R3,
type = "ri.pc",
facet.grid = FALSE) #Instead of faceting plots, all grouping levels can be shown in one plot:
summary(R3) #for random effects interpretations, see 3/2 tutorial line 74
AIC(R1, R2, R3)
AICc(R1, R2, R3)
library(AICcmodavg)
AICc(R1, R2, R3)
BIC(R1, R2, R3)
QAIC(R1, R2, R3)
plogis(fixef(R3)[[1]])
AIC(R1, R2, R3, mod = glmer(binomial))
AIC(R1, R2, R3, mod = "glmer")
AIC(R1, R2, R3, nobs = 15)
AIC(R1, R2, R3, nobs = c(15)
#from D. Bates 2010: If we wish to express results in the probability scale, then we have to apply the plogit fx to the model. This allows interpretation of the estimated coefficients in binomial model with logit link
plogis(fixef(R3)[[1]])
#for diagnostic plots, see strengejacke.wordpress.com
sjp.glmer(R3, type = "re.qq") #Another diagnostic plot is the qq-plot for random effects. Use type = "re.qq" to plot random against standard quantiles. The dots should be plotted along the line.
```
AIC(R1, R2, R3, nobs = c(15))
summary(R3) #for random effects interpretations, see 3/2 tutorial line 74
AIC(R1, R2, R3)
sjp.glmer(R3,
type = "ri.pc",
show.se = TRUE) #These plotting functions have been implemented to easier interprete odds ratios, especially for continuous covariates, by plotting the probabilities of predictors.
sjp.glmer(R3,
type = "ri.pc",
facet.grid = FALSE) #Instead of faceting plots, all grouping levels can be shown in one plot:
R_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x)
R1<-glm(Inv~Diff_PD, family = binomial(link = logit), data=RR1)
R_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x) + facet_wrap( ~ Intro_range)
sjp.glmer(R3,
type = "ri.pc",
show.se = TRUE) #These plotting functions have been implemented to easier interprete odds ratios, especially for continuous covariates, by plotting the probabilities of predictors.
sjp.glmer(R3,
type = "ri.pc",
facet.grid = FALSE) #Instead of faceting plots, all grouping levels can be shown in one plot:
