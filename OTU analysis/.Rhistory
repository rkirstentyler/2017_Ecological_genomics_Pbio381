plot(M7)
?interaction.plot
?effects.plot
?effect
?effect()
?Effect
??Effect
dat<-read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data/Data_03_28_SpatialCorrelation/treedata.csv")
head(dat)
dat2 = subset(dat,dat$species=="Acer rubrum")
ro.plots = unique(as.character(dat2$plotID))
u.plots = unique(as.character(dat$plotID))
nob.plots = u.plots[is.element(u.plots,ro.plots)==F]
dat3 = subset(dat,is.element(as.character(dat$plotID),nob.plots))
dat4 = subset(dat3,duplicated(dat3$plotID)==F)  #one row per plot
dat4$cover = 0     #cover of red maple is zero in these plots
mp = na.exclude(rbind(dat2,dat4))
mp2 = subset(mp,duplicated(mp$plotID)==F)
mp3 = subset(mp2,mp2$utme<260000)
head(mp3)
t1 <- gls(cover ~ elev + (elev^2))
t1 <- gls(cover ~ elev + (elev^2), data = trees)
t1 <- gls(cover ~ elev + (elev^2), data = trees)
head(mp3)
t1 <- gls(cover ~ elev + (elev^2), data = mp3)
rt1 <- residuals(t1)
pt1 <- fitted(t1)
plot(pt1, rt1, data = mp3 +
geom_abline(slope=1))
plot(pt1, rt1, data = mp3) +
geom_abline(slope=1)))
plot(pt1, rt1, data = mp3) +
geom_abline(slope=1))
qplot(pt1, cover, data = trees) +
geom_abline(slope=1)
qplot(pt1, cover, data = mp3) +
geom_abline(slope=1)
qplot(pt1, rt1, data = mp3)
plot(t1)
elev2$mp3 <- (elev$mp3)^2
head(mp3)
mp3$elev2 <- (mp3$elev)^2
head(mp3)
t1 <- gls(cover ~ elev + elev2, data = mp3)
rt1 <- residuals(t1)
pt1 <- fitted(t1)
#Model fit
#plot observed vs fitted values + 1:1 line
qplot(pt1, cover, data = mp3) +
geom_abline(slope=1)
#Homogeneous error distribution
#Residuals vs fitted
plot(t1)
rt1 <- residuals(t1)
pt1 <- fitted(t1)
qplot(pt1, cover, data = mp3) +
geom_abline(slope=1)
plot(t1)
qplot(elev, rt1, data = mp3)
qplot(elev2, rt1, data = mp3)
qqnorm(rt1)
qqline(rt1)
qqnorm(rt1)
qqline(rt1)
hist(rt1)
library(gstat)
library(sp)
treedata<-data.frame(rt1, mp3$x, mp3$y)
head(mp3)
treedata<-data.frame(rt1, mp3$utme, mp3$utmn)
head(treedata)
coordinates(treedata) <- c("mp3.x", "mp3.y")
coordinates(treedata) <- c("mp3.utme", "mp3.utmn")
bubble(treedata, "rt1", col=c("black", "grey"), xlab="X-Coordinates", ylab = "Y-Coordinates")
Vario1<-variogram(rt1~1, treedata)
plot(Vario1)
Vario2<-variogram(rt1~1, treedata, alpha=c(0,45,90,135))
plot (Vario2)
trees<-read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data/Data_03_28_SpatialCorrelation/treedbh.csv")
head(trees)
#remove rows of missing values
trees1 = na.exclude(trees)
#ignore dead trees
trees2 = subset(trees1,trees1$dead==0)
#remove ‘double stems’ with same coordinates
trees3 = subset(trees2,duplicated(cbind(trees2$xcoord,trees2$ycoord))==F)
t2 <- gls(INCR ~ DBH, data = trees3)
rt2 <- residuals(t2, type = "normalized")
pt2 <- fitted(t2, type = "normalized")
head(trees3)
tree3data<-data.frame(rt2, trees3$xcoord, trees3$ycoord)
head(treedata)
head(tree3data)
coordinates(tree3data) <- c("trees3.xcoord", "trees3.ycoord")
bubble(tree3data, "rt2", col=c("black", "grey"), xlab="X-Coordinates", ylab = "Y-Coordinates")
Vario3<-variogram(rt2~1, trees3data)
plot(Vario3)
Vario3<-variogram(rt2~1, tree3data)
plot(Vario3)
Vario4<-variogram(rt2~1, tree3data, alpha=c(0,45,90,135))
plot (Vario4)
tr.mod1<- gls(INCR ~ DBH, data = trees3,
correlation = corExp(form = ~x+y, nugget = TRUE))
tr.mod1<- gls(INCR ~ DBH, data = trees3,
correlation = corExp(form = ~xcoord+ycoord, nugget = TRUE))
summary(tr.mod1)
tr.mod2 <- gls(INCR ~ DBH, data = trees3,
correlation = corExp(c(100,0.9), form = ~xcoord+ycoord, nugget = TRUE))
summary(tr.mod2)
AIC(t2, tr.mod1, tr.mod2)
rmod1 <- residuals(tr.mod1)
Vario3<-variogram(rt2~1, tree3data)
plot(Vario3)
rmod1 <- residuals(tr.mod2)
rtmod1 <- residuals(tr.mod2)
rtmod1 <- residuals(tr.mod2)
#make data frame with residuals, x, y coordinates
tmod1data<-data.frame(rtmod1, trees3$xcoord, trees3$ycoord)
head(tmod1data)
#ensure the bubble fcn knows what the x and y spatial coordinates are.
coordinates(tmod1data) <- c("trees3.xcoord", "trees3.ycoord")
Variot2<-variogram(rmod1~1, tmod1data)
plot(Variot2)
Variot3<-variogram(rmod1~1, tree3data, alpha=c(0,45,90,135))
plot (Variot3)
tr.mod3<- gls(INCR ~ DBH, data = trees3,
correlation = corRatio(c(100,0.9), form = ~xcoord+ycoord, nugget = TRUE))
tr.mod4<- gls(INCR ~ DBH, data = trees3,
correlation = corGaus(c(100,0.9) form = ~xcoord+ycoord, nugget = TRUE))
tr.mod4<- gls(INCR ~ DBH, data = trees3,
correlation = corGaus(c(100,0.9), form = ~xcoord+ycoord, nugget = TRUE))
AIC(t2, tr.mod1, tr.mod2, tr.mod3, tr.mod4)
rtmod1 <- residuals(tr.mod2)
#make data frame with residuals, x, y coordinates
tmod1data<-data.frame(rtmod1, trees3$xcoord, trees3$ycoord)
head(tmod1data)
#ensure the x and y spatial coordinates
coordinates(tmod1data) <- c("trees3.xcoord", "trees3.ycoord")
Variot2<-variogram(rtmod1~1, tmod1data)
plot(Variot2)
Variot3<-variogram(rtmod1~1, tree3data, alpha=c(0,45,90,135))
plot (Variot3)
rtmod3 <- residuals(tr.mod3)
#make data frame with residuals, x, y coordinates
tmod3data<-data.frame(rtmod3, trees3$xcoord, trees3$ycoord)
head(tmod3data)
#ensure the x and y spatial coordinates
coordinates(tmod3data) <- c("trees3.xcoord", "trees3.ycoord")
Variot3<-variogram(rtmod3~1, tmod3data)
plot(Variot3)
Variot4<-variogram(rtmod3~1, tree3data, alpha=c(0,45,90,135))
plot (Variot4)
anova(M7)
plot(Total,type="l",col="green", data=bioM)
lines(fitted(M7),col="blue")
plot(bioM$Total,type="l",col="green")
lines(fitted(M7),col="blue")
boxplot(Total~Lnosp, data = bioM, main = "Biomass v #spp")
boxplot(Total~Lnosp, data = bioM, main = "Biomass v #spp")
abline(0,0)
boxplot(Total~Lnosp, data = bioM, main = "Biomass v #spp", xlab = "log spp", ylab = biomass)
boxplot(Total~Lnosp, data = bioM, main = "Biomass v #spp", xlab = "log spp", ylab = "biomass")
abline(0,0)
boxplot(Total~Lnosp, data = bioM, main = "Biomass v #spp", xlab = "log spp", ylab = "biomass")
library("phyloseq"); packageVersion("phyloseq")
library("DESeq2")
packageVersion("DESeq2")
library("ggplot2")
theme_set(theme_bw())
setwd("~/Documents/2017_Ecological_genomics_Pbio381/OTU analysis")
setwd("~/Documents/2017_Ecological_genomics_Pbio381/OTU analysis")
#Import the OTU table
otutable <- import_biom(BIOMfilename = 'otu_table_mc2_w_tax_no_pynast_failures_no_chimeras_frequency_filtered.biom',
treefilename = 'rep_set_no_chimeras.tre',
parseFunction = parse_taxonomy_greengenes)
#Import the mapping file
mapping <- import_qiime_sample_data(mapfilename = 'R_map.txt')
#Merge the mapping file to the OTU table
phylo <- merge_phyloseq(otutable, mapping)
phylo
phylo_subset = subset_samples(phylo, Phenotype != "Dead")
class(sample_data(phylo_subset)$individual)
sample_data(phylo_subset)$individual<-factor(sample_data(phylo_subset)$individual)
pheno <- phyloseq_to_deseq2(phylo_subset, ~ individual + Phenotype)
pheno_deseq_test <- DESeq(pheno, test="Wald")
library(ggplot2)
load("~/Documents/Adv Quant Methods for Life Sci NR395/Data/KF.rdata")
head(KelpForest)
kf_base<-ggplot(KelpForest, aes(Kelp,Fish)) + geom_point()
kf_base
kf_base + geom_smooth()
kf_base + geom_smooth(method=lm)
kf.lm<-lm(Fish ~ Kelp, data = KelpForest)
par(mfrow=c(1,2))
plot(B.lm,which=1)
par(mfrow=c(1,2))
plot(kf.lm,which=1)
plot(kf.lm,which=2)
plot(kf.lm,which=3)
plot(kf.lm)
qplot(Wet, E, data=bor)
par(mfrow=c(1,2))
plot(kf.lm,which=1)
plot(kf.lm, which =2)
Errors<-residuals(kelp.lm)
hist(Errors)
Errors<-residuals(kelp.lm)
Errors<-residuals(kf.lm)
hist(Errors)
plot(0:10, dpois(0:10,1), type='h', lwd=6, xlab='count category', ylab='probability')
mtext(side=3,line=.5, expression(lambda==1))
par(mfrow=c(1,3))
par(lend=2)
#dpois(value/vector, lambda)
plot(0:10, dpois(0:10,1), type='h', lwd=6, xlab='count category', ylab='probability')
mtext(side=3,line=.5, expression(lambda==1))
plot(0:15, dpois(0:15,5), type='h', lwd=6, xlab='count category', ylab='probability')
mtext(side=3,line=.5, expression(lambda==5))
plot(0:35, dpois(0:35,15), type='h', lwd=3, xlab='count category', ylab='probability')
mtext(side=3,line=.5, expression(lambda==15))
par(mfrow=c(1,1))
kf.glm1 <- glm(Fish ~ Kelp, data = KelpForest, family = poisson(link = "log"))
summary(kf.glm1)
summary(kf.lm)
kf_pois<-kf_base +
stat_smooth(method="glm",
method.args=list(family = poisson(link = "log")))
kf_pois
100*(kf.glm1$null.deviance - kf.glm1$deviance) / kf.glm1$null.deviance
par(mfrow=c(1,2))
plot(kf.glm1, which = 1)
plot(kf.lm, which=1)
kf.glm1$deviance / kf.glm1$df.residual
KelpForest$Kelp2<-(KelpForest$Kelp)^2
kf.glm2 = glm(Fish~Kelp + Kelp2,family=poisson(link="log"),data=KelpForest)
I=order(KelpForest$Kelp)
plot(KelpForest$Kelp,KelpForest$Fish)
lines(KelpForest$Kelp[I],fitted(kf.glm2)[I])
lines(KelpForest$Kelp[I],fitted(kf.glm1)[I],col="red")
100*(kf.glm2$null.deviance - kf.glm2$deviance) / kf.glm2$null.deviance
par(mfrow=c(1,3))
plot(kf.lm, which = 1)
plot(kf.glm1, which = 1)
plot(kf.glm2, which=1)
kf.glm2$deviance / kf.glm2$df.residual
AIC(kf.glm1, kf.glm2)
crypto = read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data/cryptoDATA.csv")
crypto$fraction<-crypto$Y/(crypto$N)
head(crypto)
c_base <- ggplot(crypto, aes(x=Dose, y=fraction)) +
geom_point() +
theme_bw(base_size=14)  + ylab("Fraction of Mice Infected")
c_base
crypto_glm <- glm(cbind(Y, (N-Y)) ~ Dose,
family=binomial(link = logit),
data=crypto)
#read in the data
crypto = read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data/cryptoDATA.csv")
crypto$fraction<-crypto$Y/(crypto$N)
head(crypto)
#visualize the data
c_base <- ggplot(crypto, aes(x=Dose, y=fraction)) +
geom_point() +
theme_bw(base_size=14)  + ylab("Fraction of Mice Infected")
c_base
#read in the data
crypto = read.csv("~/Documents/Adv Quant Methods for Life Sci NR395/Data/cryptoDATA.csv")
crypto$fraction<-crypto$Y/(crypto$N)
head(crypto)
#visualize the data
c_base <- ggplot(crypto, aes(x=Dose, y=fraction)) +
geom_point() +
theme_bw(base_size=14)  + ylab("Fraction of Mice Infected")
c_base
crypto_glm <- glm(cbind(Y, (N-Y)) ~ Dose,
family=binomial(link = logit),
data=crypto)
c_base +
stat_smooth(method="glm", method.args=list(family=binomial(link=logit)), formula=y ~ x)
ED<-residuals(crypto_glm)
pr<-predict(crypto_glm,type="link")
yi<-Y/N
yi<-(Y/N)
yi<- (crypto$Y / crypto$N)
qplot(x=tpr,y=yi, main="observed v predicted") +
geom_abline(slope=1)
pr<-predict(crypto_glm,type="link")
#transform from logit to original scale ############# i'm not really understanding what's going on in this step
tpr<-exp(pr)/(1+exp(pr))
#get observeds, Y/N
yi<- (crypto$Y / crypto$N)
qplot(x=tpr,y=yi, main="observed v predicted") +
geom_abline(slope=1)
qplot(tpr,ED,main="deviance residuals")
head(deer)
deer<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data_04_04_GLM/Tbdeer.txt", header = TRUE, dec = ".")
head(deer)
deer<-na.omit(deer)
#create a column for the deer sampled without the parasite
deer$DeerNegCervi <- deer$DeerSampledCervi - deer$DeerPosCervi
#make Fenced a factor
deer$fFenced <- factor(deer$Fenced)
#fit the model (this way is using the yes's and the no's together)
Deer1=glm(cbind(DeerPosCervi, DeerNegCervi) ~ OpenLand,
family = binomial(link = "logit"), data = deer)
```
We could also fit the model with Yi = proportion - the results are identical:
```{r}
#create a column that is the proprtion of positives
deer$DeerPosProp <-deer$DeerPosCervi / deer$DeerSampledCervi
#fit the same model to the proportional data
Deer2 <- glm(DeerPosProp ~ OpenLand, family = binomial(link = "logit"),
weights = DeerSampledCervi, data = deer)
#compare the output
summary(Deer2)
summary(Deer1)
#pseudo-R2
100*(Deer2$null.deviance - Deer2$deviance)/Deer2$null.deviance
#evidence of overdispersion?
Deer2$deviance/Deer2$df.residual
#not too good. there's eveidence of overdispersion so we'd want to try a quasi-binomial to account for change in variance (increasing variance with means)
```
Evidence of overdispersion above means we can fit a quasi-binomial (like the quasi-Poisson). This adds an overdispersion parameter to the variance.
```{r}
#fit the quasi-binomial model
Deer3 <- glm(DeerPosProp ~ OpenLand, family = quasibinomial(link = "logit"), weights = DeerSampledCervi, data = deer)
summary(Deer3)
###null and resid. dev. we can use those parameters
#pseudo-R2
100*(Deer3$null.deviance - Deer3$deviance) / Deer3$null.deviance
```
The larger the percentage of open land, the smaller the probabilty of sampling deer with the parasite.
Let's visualize the results
```{r}
#use ggplot
#make basic plot
d_base<-ggplot(deer, aes(OpenLand,DeerPosProp)) + geom_point() + theme_bw()
d_base
#visualize quasibinomial fit
d_base +
stat_smooth(method="glm", method.args=list(family=quasibinomial()), formula=y ~ x)
#or you can extract & plot them from the model
par(mfrow=c(1,1))
MyData <- data.frame(OpenLand = seq(from = min(deer$OpenLand),
to = max(deer$OpenLand),by=0.01))
P1 <- predict(Deer3, newdata = MyData, type = "link", se = TRUE)
# Chunk 1
library(ggplot2)
# Chunk 2
#read in the data
crypto = read.csv("/carol/UVM/Courses/Byrnes Stats 2016/cryptoDATA.csv")
crypto$fraction<-crypto$Y/(crypto$N)
head(crypto)
#visualized the data
c_base <- ggplot(crypto, aes(x=Dose, y=fraction)) +
geom_point() +
theme_bw(base_size=14)  + ylab("Fraction of Mice Infected")
c_base
#visualize with a linear relationship
c_base + geom_smooth(method=lm)
#fit a linear model
M0<-lm(fraction ~ Dose, data=crypto)
#look at the errors
par(mfrow=c(1,3))
plot(M0, which=1)
plot(M0, which=2)
Errors<-residuals(M0)
hist(Errors)
# Chunk 3
boar<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data_04_04_GLM/Boar.txt", header = TRUE, dec = ".")
head(boar)
#visualize the data with a linear regression
wb_base<-ggplot(boar, aes(LengthCT,Tb)) + geom_point() + theme_bw()
wb_base
wb_base + geom_smooth(method="lm")
#fit a linear model to examine the residuals
boar.lm<-lm(boar$Tb~boar$LengthCT)
par(mfrow=c(1,3))
plot(boar.lm, which=1:2)
#ack!
#look at length by Tb
boxplot(boar$LengthCT~boar$Tb)
# Chunk 4
#set graphics window to have one row and three columns
par(mfrow=c(1,3))
#set bar ends to have square ends
par(lend=2)
plot(0:10, dbinom(0:10,size=10,prob=.1), type='h', lwd=6, xlab='#successes', ylab='probability')
plot(0:10, dbinom(0:10,10,.5), type='h', lwd=6, xlab='#successes', ylab='probability')
plot(0:10, dbinom(0:10,10,.9), type='h', lwd=6, xlab='#successes', ylab='probability')
# Chunk 5
par(mfrow=c(1,2))
prob<-c(0.001,0.01,0.1,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.91,0.92,0.93,0.94,0.95,0.98)
odds<-round(prob/(1-prob),4)
odds
plot(prob,odds)
# Chunk 6
plot(prob,log(odds))
#or we can look at the probability as function of the odds or log odds (which are bounded)
plot(odds, prob)
plot(log(odds), prob)
# Chunk 7
#fit a logistic regression to the data
B1<-glm(Tb~LengthCT, family = binomial(link = logit), data=boar)
summary(B1)
##probablity of having the disease increases with length
#visualize the fit
wb_base +
stat_smooth(method="glm", method.args=list(family = binomial), formula=y~x)
#visualize some alternative link functions...
wb_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "probit")), formula=y ~ x) #slightly different curve shape
wb_base +
stat_smooth(method="glm", method.args=list(family=binomial(link = "cloglog")), formula=y ~ x)#for different numbers of 0s and 1s (the others assume roughly equal numbers of 0s and 1s) - assymetrial sigmoidal curve
# Chunk 8
100*(B1$null.deviance - B1$deviance)/B1$null.deviance
#we get a pretty bad number because we have pretty even distribution of yes and no and the fit isn't touching the points at all....
# Chunk 9
par(mfrow=c(2,2))
plot(B1)
# Chunk 10
cod<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data_04_04_GLM/ParasiteCod.txt", header = TRUE, dec = ".")
head(cod)
#visualize the data
c_base<-ggplot(cod, aes(Length,Prevalence)) + geom_point() + theme_bw()
c_base
#make columns for Area and Year as factors
cod$fArea <- factor(cod$Area)
cod$fYear <- factor(cod$Year)
#fit a binomial model with logit link where Prevalence is a function of fArea, fYear, fArea*fYear, and Length
P1 <- glm(Prevalence ~ fArea*fYear + Length, family = binomial(link = logit), data=cod)
summary(P1)
# Chunk 11
100*(P1$null.deviance - P1$deviance)/P1$null.deviance
# Chunk 12
deer<-read.table("~/Documents/Adv Quant Methods for Life Sci NR395/Data_04_04_GLM/Tbdeer.txt", header = TRUE, dec = ".")
head(deer)
deer<-na.omit(deer)
#create a column for the deer sampled without the parasite
deer$DeerNegCervi <- deer$DeerSampledCervi - deer$DeerPosCervi
#make Fenced a factor
deer$fFenced <- factor(deer$Fenced)
#fit the model (this way is using the yes's and the no's together)
Deer1=glm(cbind(DeerPosCervi, DeerNegCervi) ~ OpenLand,
family = binomial(link = "logit"), data = deer)
# Chunk 13
#create a column that is the proprtion of positives
deer$DeerPosProp <-deer$DeerPosCervi / deer$DeerSampledCervi
#fit the same model to the proportional data
Deer2 <- glm(DeerPosProp ~ OpenLand, family = binomial(link = "logit"),
weights = DeerSampledCervi, data = deer)
#compare the output
summary(Deer2)
summary(Deer1)
#pseudo-R2
100*(Deer2$null.deviance - Deer2$deviance)/Deer2$null.deviance
#evidence of overdispersion?
Deer2$deviance/Deer2$df.residual
#not too good. there's eveidence of overdispersion so we'd want to try a quasi-binomial to account for change in variance (increasing variance with means)
# Chunk 14
#fit the quasi-binomial model
Deer3 <- glm(DeerPosProp ~ OpenLand, family = quasibinomial(link = "logit"), weights = DeerSampledCervi, data = deer)
summary(Deer3)
###null and resid. dev. we can use those parameters
#pseudo-R2
100*(Deer3$null.deviance - Deer3$deviance) / Deer3$null.deviance
# Chunk 15
#use ggplot
#make basic plot
d_base<-ggplot(deer, aes(OpenLand,DeerPosProp)) + geom_point() + theme_bw()
d_base
#visualize quasibinomial fit
d_base +
stat_smooth(method="glm", method.args=list(family=quasibinomial()), formula=y ~ x)
#or you can extract & plot them from the model
par(mfrow=c(1,1))
MyData <- data.frame(OpenLand = seq(from = min(deer$OpenLand),
to = max(deer$OpenLand),by=0.01))
P1 <- predict(Deer3, newdata = MyData, type = "link", se = TRUE)
plot(MyData$OpenLand,exp(P1$fit)/(1+exp(P1$fit)),
type="l",ylim=c(0,1),
xlab="Percentage open land",
ylab="Probability on E. cervi")
lines(MyData$OpenLand,exp(P1$fit+1.96*P1$se.fit)/
(1+exp(P1$fit+1.96*P1$se.fit)),lty=2)
lines(MyData$OpenLand,exp(P1$fit-1.96*P1$se.fit)/
(1+exp(P1$fit-1.96*P1$se.fit)),lty=2)
points(deer$OpenLand,deer$DeerPosProp)
head(deer)
library(readxl)
Fridley_data_summary_table_forpub3 <- read_excel("~/Desktop/Documents/Dissertation/Fridley_data_summary_table_forpub3.xls")
View(Fridley_data_summary_table_forpub3)
Fridley_data <- read_excel("~/Desktop/Documents/Dissertation/Fridley_data_summary_table_forpub3.xls")
head(Fridley_data)
head(Fridley_data)
library(readxl)
Fridley_data_summary_table_forpub3 <- read_excel("~/Desktop/Documents/Dissertation/Fridley_data_summary_table_forpub3.xls")
View(Fridley_data_summary_table_forpub3)
library(readxl)
Fridley_Dataset_S1 <- read_excel("~/Desktop/Documents/Dissertation/Fridley Dataset_S1.xls")
View(Fridley_Dataset_S1)
qplot(crypto$Dose,ED,main="deviance residuals")
qplot(x=tpr,y=deer$DeerPosProp, main="observed v predicted") +
geom_abline(slope=1)
qplot(x=tpr,y=deer$DeerPosProp, main="observed v predicted") +
geom_abline(slope=1)
qplot(crypto$Dose,ED,main="deviance residuals") ###### predictors = dose, right?
100*(crypto_glm$null.deviance / crypto_glm$deviance) - crypto_glm$null.deviance
100*(B1$null.deviance - B1$deviance)/B1$null.deviance
100*(P1$null.deviance - P1$deviance)/P1$null.deviance
100*(Deer2$null.deviance - Deer2$deviance)/Deer2$null.deviance
Deer2$deviance/Deer2$df.residual
